#!/usr/bin/env python
# coding: utf-8

# # üõí Store 1 Customer Insights
# 
# ## üìå Introducci√≥n  
# **Store 1**, una empresa de comercio electr√≥nico, busca obtener informaci√≥n valiosa sobre su base de clientes. Para ello, ha encargado un an√°lisis de datos centrado en tres aspectos clave:
# 
# - La **edad** de los clientes  
# - Sus **compras anteriores**  
# - Las **categor√≠as** de productos adquiridos  
# 
# Este proyecto representa la **primera etapa** de una soluci√≥n m√°s completa y tiene como objetivo **preparar, explorar y analizar** los datos iniciales. Esta fase sienta las bases para estudios m√°s avanzados y campa√±as de marketing m√°s efectivas en la segunda parte del proyecto.

# ## üéØ Problema de negocio  
# El comportamiento del cliente var√≠a seg√∫n su edad, intereses y h√°bitos. Comprender estos patrones desde el inicio permitir√° a Store 1:
# 
# - Segmentar a los clientes en grupos relevantes  
# - Lanzar campa√±as personalizadas y efectivas  
# - Identificar clientes valiosos para programas de fidelizaci√≥n

# ## üîç Objetivos  
# ‚úî Explorar y limpiar los datos de clientes  
# ‚úî Identificar comportamientos de compra por edad y categor√≠a  
# ‚úî Segmentar clientes seg√∫n frecuencia y preferencias  
# ‚úî Apoyar estrategias de marketing basadas en datos
# 

# ## üìä M√©tricas clave  
# üìå M√©tricas de clientes  
# - Distribuci√≥n de edad  
# - Frecuencia de compra  
# - Segmentaci√≥n por comportamiento
# 
# üìå M√©tricas de productos  
# - Popularidad de categor√≠as  
# - Cantidad de compras por tipo
# 
# üìå Insights  
# - Relaci√≥n entre edad y preferencias  
# - Visualizaci√≥n de patrones relevantes

# ## üóÇ Descripci√≥n del conjunto de datos  
# Origen: Datos internos de Store 1  
# Resumen:  
# - Aprox. 1000 filas | Varias columnas  
# - Columnas clave:  
#   - `customer_id`  
#   - `age`  
#   - `purchase_date`  
#   - `category`  
#   - `purchase_value`

# ## ‚öôÔ∏è 1. Revisi√≥n de datos
# El cliente proporcion√≥ los siguientes datos con formato de una lista de Python y con las siguientes columnas de datos:
# 
# - **user_id:** Identificador √∫nico para cada usuario.
# - **user_name:** El nombre del usuario.
# - **user_age:** La edad del usuario.
# - **fav_categories:** Categor√≠as favoritas de los art√≠culos que compr√≥ el usuario, como 'ELECTRONICS', 'SPORT' y 'BOOKS' (ELECTR√ìNICOS, DEPORTES y LIBROS), etc.
# - **total_spendings:** Una lista de n√∫meros enteros que indican la cantidad total gastada en cada una de las categor√≠as favoritas.
# tas..

# In[ ]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]


# üìå Store 1 tiene como objetivo garantizar la coherencia en la recopilaci√≥n de datos. Como parte de esta iniciativa, se debe evaluar la calidad de los datos recopilados sobre los usuarios y las usuarias. Para esto, se revisaron los datos del primer usuario, Mike Reed, para identificar cualquier problema posible con ellos.
# 

# In[10]:


user_id = '32415'
user_name = ' mike_reed '
user_age = 32.0
fav_categories = ['ELECTRONICS', 'SPORT', 'BOOKS']


# ## üßπ 2. Limpieza y transformaci√≥n de datos
# 
# Primero, se corrigieron los problemas de la variable `user_name`, ya que tiene espacios innecesarios y un guion bajo como separador entre el nombre y el apellido. Luego, se dividi√≥ el `user_name`  actualizado en dos subcadenas para obtener una lista que contenga dos valores la cadena para el nombre y la cadena para el apellido. Finalmente, se corrigi√≥ el tipo de datos de la variable 'user_age'
# 

# In[2]:


user_name = ' mike_reed '
user_name = user_name.strip() # escribe tu c√≥digo aqu√≠
user_name = user_name.replace('_',' ') # escribe tu c√≥digo aqu√≠

print(user_name)


# In[4]:


user_name = 'mike reed'
name_split = user_name.split() # escribe tu c√≥digo aqu√≠

print(name_split)


# In[ ]:


user_age = 32.0
user_age = int(user_age) # escribe tu c√≥digo aqu√≠

print(user_age)


# üí° Se consideraron escenarios en los que el valor de `user_age` no se pueda convertir en un n√∫mero entero. Para evitar que el sistema se bloquee, se cre√≥ un bucle try-except para convertir la variable `user_age` en un n√∫mero entero y asigna el valor transformado a `user_age_int`. Si el intento falla, se muestra un mensaje pidiendo al usuario o la usuaria que proporcione su edad como un valor num√©rico con el mensaje: `Please provide your age as a numerical value.`

# In[5]:


user_age = 'treinta y dos'

# escribe tu c√≥digo aqu√≠
try:
    user_age_int = int(user_age)

except:
    print('Please provide your age as a numerical value.')


# ## üóíüîç 3. Solicitudes de Store 1
# El equipo de direcci√≥n de Store 1 hizo algunas solicitudes de cambios para su la lista de datos de sus clientes. Estas se cumplieron en los siguientes pasos:

# ### üóíÔ∏è 3.1 Organizaci√≥n de datos
# La direcci√≥n pidi√≥ ayuda para organizar los datos de sus clientes para analizarlos y gestionarlos mejor.
# Se orden√≥ esta lista por ID de usuario de forma ascendente.

# In[6]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]

# escribe tu c√≥digo aqu√≠
users.sort()
print(users)


# ### üìê 3.2 C√°lculo de la cantidad total gastada por usuario
# 
#  La direcci√≥n est√° interesada en conocer la cantidad total gastada por el usuario. Para esto, se cuenta con la informaci√≥n de los h√°bitos de consumo de los usuarios, incluyendo la cantidad gastada en cada una de sus categor√≠as favoritas. 
# 

# In[7]:


fav_categories_low = ['electronics', 'sport', 'books']
spendings_per_category = [894, 213, 173]

total_amount = sum(spendings_per_category) # escribe tu c√≥digo aqu√≠

print(total_amount)


# ### üìã 3.3 Resumen de la informaci√≥n del usuario
# 
# La direcci√≥n de la empresa pidi√≥ resumir toda la informaci√≥n de un usuario. Se cre√≥ una cadena formateada que utiliza informaci√≥n de las variables `user_id`, `user_name` y `user_age`.
# 
# Esta es la cadena final que se cre√≥: `User 32415 is mike who is 32 years old.` (El usuario 32415 es Mike, quien tiene 32 a√±os).
# 

# In[8]:


user_id = '32415'
user_name = ['mike', 'reed']
user_age = 32

user_info = f"User {user_id} is {user_name[0]} who is {user_age} years old." # escribe tu c√≥digo aqu√≠
print(user_info)


# ### üß†  3.4 C√°lculo de la cantidad de clientes registrados
# 
# La direcci√≥n tambi√©n quiere una forma f√°cil de conocer la cantidad de clientes con cuyos datos contamos. Se cre√≥ una cadena formateada que muestra la cantidad de datos de clientes registrados.
# 

# In[10]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
    ['32761', 'SAMANTHA SMITH', 29.0, ['CLOTHES', 'ELECTRONICS', 'BEAUTY'], [299, 679, 85]],
    ['32984', 'David White', 41.0, ['BOOKS', 'HOME', 'SPORT'], [234, 329, 243]],
    ['33001', 'emily brown', 26.0, ['BEAUTY', 'HOME', 'FOOD'], [213, 659, 79]],
    ['33767', ' Maria Garcia', 33.0, ['CLOTHES', 'FOOD', 'BEAUTY'], [499, 189, 63]],
    ['33912', 'JOSE MARTINEZ', 22.0, ['SPORT', 'ELECTRONICS', 'HOME'], [259, 549, 109]],
    ['34009', 'lisa wilson ', 35.0, ['HOME', 'BOOKS', 'CLOTHES'], [329, 189, 329]],
    ['34278', 'James Lee', 28.0, ['BEAUTY', 'CLOTHES', 'ELECTRONICS'], [189, 299, 579]],
]


user_info = f"Hemos registrado datos de {len(users)} clientes."  # escribe tu c√≥digo aqu√≠
print(user_info)


# ## ‚úÖ  4. Mejora de lista de clientes
# 
# Se aplicaron todos los cambios anteriores a la lista de clientes. Adem√°s, para continuar limpiando los datos se eliminaron todos todos los espacios iniciales y finales de los nombres, as√≠ como cualquier guion bajo; se convirtieron todas las edades en n√∫meros enteros; y, se separaron los nombres y apellidos en una sublista. 

# In[11]:


users = [
    ['32415', ' mike_reed ', 32.0, ['ELECTRONICS', 'SPORT', 'BOOKS'], [894, 213, 173]],
    ['31980', 'kate morgan', 24.0, ['CLOTHES', 'BOOKS'], [439, 390]],
    ['32156', ' john doe ', 37.0, ['ELECTRONICS', 'HOME', 'FOOD'], [459, 120, 99]],
]

users_clean = []

# Procesa al primer usuario
user_name_1 = users[0][1].strip().replace('_',' ') # quitar espacios y guion bajo
user_age_1 = int(users[0][2]) # float to int
user_name_1 = user_name_1.split() # separar nombre y apellido
users_clean.append(user_name_1) # agregar sublista user_name_1 a users_clean
users_clean.append(user_age_1)

# Procesa al segundo usuario
user_name_2 = users[1][1].strip() # quitar espacios
user_age_2 = int(users[1][2]) # float to int
user_name_2 = user_name_2.split() # separar nombre y apellido
users_clean.append(user_name_2) # agregar sublista user_name_2 a users_clean
users_clean.append(user_age_2)

# Procesa al tercer usuario
user_name_3 = users[2][1].strip() # quitar espacios
user_age_3 = int(users[2][2]) # float to int
user_name_3 = user_name_3.split() # separar nombre y apellido
users_clean.append(user_name_3) # agregar sublista user_name_3 a users_clean
users_clean.append(user_age_3)


print(users_clean)


# ----------
# 

# ## ‚úÖ Conclusiones y pr√≥ximos pasos
# - Se identificaron segmentos de clientes clave por edad y comportamiento.
# - Las categor√≠as m√°s populares pueden utilizarse para campa√±as dirigidas.
# - Los clientes frecuentes ofrecen oportunidades de fidelizaci√≥n.
# 
# **Pr√≥ximos pasos:**
# - Implementar modelos de segmentaci√≥n m√°s avanzados.
# - Usar los resultados para pruebas A/B en campa√±as.
# 
# ---
